#!/usr/bin/env python3
# -*- coding: utf-8 -*-

######################################################################################################################
#
# Variant Annotation Tool: 2_fetch_dbSnp_terms.py
# Shuang (Amber) Guo, 10-24-2021
#
# Functions of this script include:
# 1. Fetch terms of interests in SNP database based on chr-locus-reference-variant combination.
#    Terms of interests include: id of variant in dbSnp, SO (Sequence Ontology) id for max impact function of variant.
#    SNP database used in this script is: dbSnp153Common.bed
#    SNP database in BigBed format was downloaded from: https://genome.ucsc.edu/FAQ/FAQdownloads.html#snp
#    Bed format of dbSnp153 was generated by command: bigBedToBed dbSnp153Common.bb dbSnp153Common.bed
#    Alternative references for SNP databases can be used instead of dbSnp153Common if needed.
# 2. Append terms of interested fetched from dbSnp153Common.bed to file.
# 3. Record numbers of reference and variant found and not found in dbSnp153Common in log file.
#
######################################################################################################################

import time
import re

time_start = time.time()
print('dbSnp indexing...')

# make a dictionary with key as chr-locus-reference, and value as variant
# make a dictionary with key as chr-locus-reference-variant, and value as dbSnp terms of interests
with open('dbSnp153Common.bed', 'r') as ref:
    cor2alt = {}
    coralt2info = {}
    for linein in ref:
        eles = re.split(r'\t', linein)
        chrom = eles[0]
        loci = eles[2]
        ref = eles[4]
        cor = chrom + '-' + loci + '-' + ref
        alt = eles[6]
        cor_alt = cor + '&' + alt
        alt_eles = re.split(r',', alt)
        max_func_impact_SO_id = eles[12]
        dbid = eles[3]
        dbinfo = dbid + '\t' + max_func_impact_SO_id
        cor2alt[cor] = alt_eles
        coralt2info[cor_alt] = dbinfo

print('fetching dbSnp terms...')
with open('data_vcf_filtered.txt', 'r') as file2in:
    newlines = []
    header = file2in.readline()
    header = header.rstrip('\n')
    total_alt = total_ref = total_none = 0
    for linein in file2in:
        linein = linein.rstrip('\n')
        eles = re.split(r'\t', linein)
        chrom = 'chr' + eles[0]
        loci = eles[1]
        ref = eles[2]
        alt = eles[3]
        alt_type = eles[4]
        cor = chrom + '-' + loci + '-' + ref
        if cor in cor2alt:    # fetch variants for chr-locus-reference from dbSnp
            alt_eles = cor2alt[cor]
            alts = ','.join(alt_eles)
            cor_alt = cor + '&' + alts
            if alt in alt_eles:    # for each variant, fetch dbSnp terms for chr-locus-reference-variant from dbSnp
                dbinfo = coralt2info[cor_alt]
                newline = linein + '\t' + dbinfo
                total_alt += 1
            else:    # if reference is not found and variant is not found in dbSnp
                newline = linein + '\tref_in_dbSnp_alt_not_in_dbSnp\tref_in_dbSnp_alt_not_in_dbSnp'
                total_ref += 1
        else:    # if reference is not found in dbSnp
            newline = linein + '\tref_not_in_dbSnp\tref_not_in_dbSnp'
            total_none += 1
        newlines.append(newline)

print('appending dbSnp terms...')
with open('data_vcf_filtered_dbSnp153Common.txt', 'w') as file2out:
    file2out.write(header + '\tclass_dbSnp\tid_dbSnp\tmax_function_impact_SO_id\n')
    for newline in newlines:
        file2out.write(newline + '\n')

time_end = time.time()
run_time = '{:.2f}'.format(time_end - time_start)
print('dbSnp terms appending completed!\n')

with open('log.txt', 'a') as file2log:
    file2log.write('reference and variant found in dbSnp: {}\n'.format(total_alt))
    file2log.write('reference found and variant not found in dbSnp: {}\n'.format(total_ref))
    file2log.write('reference not found in dbSnp: {}\n'.format(total_none))
    file2log.write('dbSnp terms appending run time: {}s ... Done\n\n'.format(run_time))
